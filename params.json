{"name":"Sugar","tagline":"Syntactic sugar for .NET","body":"#Syntactic Sugar for .NET\r\n\r\nA collection of .NET helper classes, extension methods and shortcuts for common .NET operations.\r\n\r\nThe project is divided in several class libraries:\r\n\r\n- Sugar: Core of the nice to have helpers and extensions methods.\r\n- Sugar.Html: [CsQuery](https://github.com/jamietre/CsQuery) extension methods to help you parse HTML.\r\n- Sugar.Http: Helper classes and interface to leverage .NET's HttpClient.\r\n- Sugar.Test: Unit tests (nunit + moq)\r\n- Sugar.Test.Integration: Integration test\r\n- Sugar.Web: Handy helpers when dealing with domain names and URLs.\r\n\r\n[![Build status](https://ci.appveyor.com/api/projects/status/py4kl09udd0t7egy/branch/master?svg=true)](https://ci.appveyor.com/project/bounav/sugar/branch/master)\r\n\r\n##Overview\r\n\r\nWe started this project internally to centralise the code we kept re-using from project to project. If the bits we add have a dependency we try to put it in its own project / DLL (e.g. Sugar.Http depending on System.Net.Http).\r\n\r\n###Command\r\n\r\nCheck the `Sugar.Command` namespace out if you're thinking need to create a command line tool. It will help you define different commands and then execute a given command.\r\n\r\n###Extensions\r\n\r\nA major part of this project consists in (mostly) chainable extension methods. They live in the namespace `Sugar.Extensions`.\r\n\r\nThe most usefull extensions methods are probably the string ones such as `.StartsWith()` or `.SubstringAfterChar()`. We've also created .Humanise() extensions methods for datetimes and timespans.\r\n\r\n###CountryCode\r\n\r\nEnumeration listing all countries on Earth (ISO 3166-1-alpha-2 code elements).\r\n\r\n###File Service\r\n\r\nWraps System.IO.File behind an interface to ease unit testing.\r\n\r\n###GeoLocation\r\n\r\nRepresents a point on the surface of a sphere approximating the Earth. It contains a few methods that will compute (approximatively) the distance between two points on earth as well a give you a bouding box containing for a given radius around a point.\r\n\r\nIf you need precision and or performance, use a specialed library!\r\n\r\n###HtmlBuilder\r\n\r\n`IBuilder` implementation to help generating HTML fragments.\r\n\r\n###Http Service\r\n\r\nThis service and its interface live in the `Sugar.Web` project. It wraps calls to .NET's HttpWebResponse with an interface that is easily mockable in a unit test.\r\n\r\nWe wrote this class before HttpClient was introduced in .NET 4.0 and are considering this project near it's end of life.\r\n\r\n###Retry\r\n\r\nHelper class to retry a given action `x` times. If you need more flexibility checkout [Polly](https://github.com/App-vNext/Polly).\r\n\r\n###TextTable\r\n\r\nHelper class to ouput text as a table in a console application\r\n\r\n##License\r\n\r\nThis project is licensed under the terms of the [MIT license](https://github.com/comsechq/sugar/blob/master/LICENSE.txt). \r\n\r\nBy submitting a pull request for this project, you agree to license your contribution under the MIT license to this project.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}